

# Use case:
# - A Person can follow a Vet
# - The connection will contain Vet name and location
#   which can be used in filtering, sorting

# Reference:
# https://graphql.org/learn/pagination/
# https://www.apollographql.com/docs/react/pagination/cursor-based/
# https://relay.dev/graphql/connections.htm

# TODO: Spread across multiple files
# https://the-guild.dev/graphql/tools/docs/schema-merging#file-loading

# Query.common

type PageInfo {
    # Indicates whether the collection has an additional page when paginating forward.
    hasNextPage: Boolean!
    # The cursor of the last object in the returned slice of the collection.
    endCursor: String!
}

input QueryInput {
    first: Int
    after: Int
    searchTerm: String
}

# Query.vet

type VetFollowerEdge {
    established: String!
    node: PersonNode!
    cursor: String!
}

type VetFollowerConnection {
    pageInfo: PageInfo!
    edges: [VetFollowerEdge!]!
}

type VetNode {
    id: ID!
    followers(input: QueryInput): VetFollowerConnection
}


# Query.person

type VetFollowEdge {
    established: String!
    node: VetNode!
    cursor: String!
}

type VetFollowConnection {
    pageInfo: PageInfo!
    edges: [VetFollowEdge!]!
}

type PersonNode {
    id: ID!
    follows(input: QueryInput): VetFollowConnection
}

# Queries

type Query {
    person(id: ID!): PersonNode
    vet(id: ID!): VetNode
}

# Mutation.follow

input FollowVetInput {
    vetId: ID!
    name: String!
    location: String!
}

input FollowInput {
    personId: ID!
    vet: FollowVetInput!
}

type FollowResult {
    success: Boolean!
}

# Mutations

type Mutation {
    follow(input: FollowInput!): FollowResult!
}
