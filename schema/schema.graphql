

# Use case:
# - A Person can follow a Vet
# - The connection will contain Vet name and location
#   which can be used in filtering, sorting

# Reference:
# https://graphql.org/learn/pagination/
# https://www.apollographql.com/docs/react/pagination/cursor-based/
# https://relay.dev/graphql/connections.htm

type VetNode {
    id: ID!
}

type FollowEdge {
    established: String!
    node: VetNode!
    cursor: String!
}

type FollowConnection {
    pageInfo: PageInfo!
    edges: [FollowEdge!]!
}

type PersonNode {
    id: ID!
    follows(first: Int, after: String): FollowConnection
}



type FollowResult {
    success: Boolean!
}

input FollowVetInput {
    vetId: ID!
    name: String!
    location: String!
}

input FollowInput {
    personId: ID!
    vet: FollowVetInput!
}

type Query {
    person(id: ID!): PersonNode
}

type Mutation {
    follow(input: FollowInput!): FollowResult!
}


type PageInfo {
    # Indicates whether the collection has an additional page when paginating forward.
    hasNextPage: Boolean!
    # The cursor of the last object in the returned slice of the collection.
    endCursor: String!
}
